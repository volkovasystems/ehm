{"version":3,"sources":["test.bridge.js"],"names":["assert","require","path","describe","bridgeURL","resolve","__dirname","it","equal","browser","url","execute","ehm","name","value","testA","testB","Meta","create","serialize","Error","deserialize","valueOf","deepEqual","result"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,IAAMA,SAASC,QAAS,oBAAT,CAAf;;;;;;AAMA;AACA,IAAMC,OAAOD,QAAS,MAAT,CAAb;AACA;;;;;;;;;AASA;;AAEAE,SAAU,KAAV,EAAiB,YAAO;;AAEvB,KAAIC,wBAAuBF,KAAKG,OAAL,CAAcC,SAAd,EAAyB,aAAzB,CAA3B;;AAEAH,UAAU,UAAV,EAAsB,YAAO;AAC5BI,KAAI,0BAAJ,EAAgC,YAAO;AACtC;AACH;;;AAGA;;AAEGP,UAAOQ,KAAP,CAAcC,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB,CAAkC,oBAAOC,MAAOC,IAAd,EAAlC,EAAuDC,KAArE,EAA4E,MAA5E;;AAEA,GATD;AAUA,EAXD;;AAaAX,UAAU,8CAAV,EAA0D,YAAO;AAChEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKC,MAAL,CAAa,YAAb,EAA4BC,SAA5B,EAAP;AACA,IANU;;AAQVL,QARF;;AAUAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,8DAArB;AACA,GA5BD;AA6BA,EA9BD;;AAgCAb,UAAU,mCAAV,EAA+C,YAAO;AACrDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKC,MAAL,CAAa,CAAb,EAAiBC,SAAjB,EAAP;AACA,IANU;;AAQVL,QARF;;AAUAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,kDAArB;AACA,GA5BD;AA6BA,EA9BD;;AAgCAb,UAAU,sCAAV,EAAkD,YAAO;AACxDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKC,MAAL,CAAa,IAAb,EAAoBC,SAApB,EAAP;AACA,IANU;;AAQVL,QARF;;AAUAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,yDAArB;AACA,GA5BD;AA6BA,EA9BD;;AAgCAb,UAAU,sDAAV,EAAkE,YAAO;AACxEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;AAEA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKC,MAAL,CAAa,EAAE,SAAS,OAAX,EAAb,EAAoCC,SAApC,EAAP;;AAEA,IAPU;;AASVL,QATF;;AAWAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,oEAArB;AACA,GA5BD;AA6BA,EA9BD;;AAgCAb,UAAU,uDAAV,EAAmE,YAAO;AACzEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;AACA;AACH;;;;;;;;;;;AAWA;AACGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,kEAArB;AACA,GA7BD;AA8BA,EA/BD;;AAiCA;AACA;AACA;AACD;;;;;;;;;;;AAWA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAb,UAAU,uCAAV,EAAmD,YAAO;AACzDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;AAUA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;AACA,WAAOK,KAAKC,MAAL,CAAaE,KAAb,EAAqBD,SAArB,EAAP;AACA,IALU;;AAOVL,QAPF;;AASAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,oGAArB;AACA,GA1BD;AA2BA,EA5BD;;AA8BAb,UAAU,4CAAV,EAAwD,YAAO;AAC9DI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;AAWA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,sEAArB;AACA,GAhCD;AAiCA,EAlCD;;AAoCAb,UAAU,sCAAV,EAAkD,YAAO;AACxDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;AAWA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,sDAArB;AACA,GAhCD;AAiCA,EAlCD;;AAoCAb,UAAU,2CAAV,EAAuD,YAAO;AAC7DI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;AAWA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,+DAArB;AACA,GAhCD;AAiCA,EAlCD;;AAoCAb,UAAU,qCAAV,EAAiD,YAAO;AACvDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;AAWA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,8CAArB;AACA,GAhCD;AAiCA,EAlCD;;AAoCAb,UAAU,+EAAV,EAA2F,YAAO;AACjGI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;AAEA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKI,WAAL,CAAkBJ,KAAKC,MAAL,CAAa,YAAb,EAA4BC,SAA5B,EAAlB,EAA6DG,OAA7D,EAAP;AACA,IANU;;AAQVR,QARF;;AAUAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,YAArB;AACA,GA3BD;AA4BA,EA7BD;;AA+BAb,UAAU,oEAAV,EAAgF,YAAO;AACtFI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;AAEA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKI,WAAL,CAAkBJ,KAAKC,MAAL,CAAa,CAAb,EAAiBC,SAAjB,EAAlB,EAAkDG,OAAlD,EAAP;AACA,IANU;;AAQVR,QARF;;AAUAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,CAArB;AACA,GA3BD;AA4BA,EA7BD;;AA+BAb,UAAU,uEAAV,EAAmF,YAAO;AACzFI,KAAI,4BAAJ,EAAkC,YAAO;AACxC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,SAArB;;;AAGA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKI,WAAL,CAAkBJ,KAAKC,MAAL,CAAa,IAAb,EAAoBC,SAApB,EAAlB,EAAqDG,OAArD,EAAP;AACA,IANU;;AAQVR,QARF;;AAUAd,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,IAArB;AACA,GA5BD;AA6BA,EA9BD;;AAgCAb,UAAU,uFAAV,EAAmG,YAAO;AACzGI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA,OAAIC,QAAQP,QAAQC,GAAR,CAAaN,SAAb,EAAyBO,OAAzB;;AAEX,eAAW;AACV,QAAIM,OAAOL,KAAX;;AAEA,WAAOK,KAAKI,WAAL,CAAkBJ,KAAKC,MAAL,CAAa,EAAE,SAAS,OAAX,EAAb,EAAoCC,SAApC,EAAlB,EAAqEG,OAArE,EAAP;AACA,IANU;;AAQVR,QARF;;AAUAd,UAAOuB,SAAP,CAAkBP,KAAlB,EAAyB,EAAE,SAAS,OAAX,EAAzB;AACA,GA5BD;AA6BA,EA9BD;;AAgCAb,UAAU,wFAAV,EAAoG,YAAO;AAC1GI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;AAWA;AACGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,eAArB;AACA,GA/BD;AAgCA,EAjCD;;AAmCAb,UAAU,6CAAV,EAAyD,YAAO;AAC/DI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;;;AAaA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,IAArB;AACA,GAlCD;AAmCA,EApCD;;AAsCAb,UAAU,kCAAV,EAA8C,YAAO;AACpDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;;AAYA;AACGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,IAArB;AACA,GAhCD;AAiCA,EAlCD;;AAoCAb,UAAU,qCAAV,EAAiD,YAAO;AACvDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;;AAYA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,IAArB;AACA,GAjCD;AAkCA,EAnCD;;AAqCAb,UAAU,qDAAV,EAAiE,YAAO;AACvEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;AAEA;AACH;;;;;;;;;;;;AAYA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,IAArB;;AAEA,GAjCD;AAkCA,EAnCD;;AAqCAb,UAAU,sDAAV,EAAkE,YAAO;AACxEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;AAWA;AACGP,UAAOQ,KAAP,CAAcO,KAAd,EAAqB,QAArB;;;AAGA;AACH;;;;;;;;;;;;AAYA;;AAEGf,UAAOQ,KAAP,CAAcQ,KAAd,EAAqB,IAArB;;AAEA,GAlCD;AAmCA,EApCD;;AAsCAb,UAAU,6CAAV,EAAyD,YAAO;AAC/DI,KAAI,wBAAJ,EAA8B,YAAO;AACpC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,kCAAV,EAA8C,YAAO;AACpDI,KAAI,wBAAJ,EAA8B,YAAO;AACpC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,qCAAV,EAAiD,YAAO;AACvDI,KAAI,wBAAJ,EAA8B,YAAO;AACpC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,qDAAV,EAAiE,YAAO;AACvEI,KAAI,wBAAJ,EAA8B,YAAO;AACpC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,sDAAV,EAAkE,YAAO;AACxEI,KAAI,wBAAJ,EAA8B,YAAO;AACpC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,8CAAV,EAA0D,YAAO;AAChEI,KAAI,oBAAJ,EAA0B,YAAO;AAChC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,mCAAV,EAA+C,YAAO;AACrDI,KAAI,oBAAJ,EAA0B,YAAO;AAChC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,sCAAV,EAAkD,YAAO;AACxDI,KAAI,oBAAJ,EAA0B,YAAO;AAChC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,sDAAV,EAAkE,YAAO;AACxEI,KAAI,oBAAJ,EAA0B,YAAO;AAChC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,uDAAV,EAAmE,YAAO;AACzEI,KAAI,oBAAJ,EAA0B,YAAO;AAChC;AACH;;;;;;;;;;;AAWA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAjBD;AAkBA,EAnBD;;AAqBArB,UAAU,6CAAV,EAAyD,YAAO;AAC/DI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;;;;;;;;;AAmBA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAzBD;AA0BA,EA3BD;;AA6BArB,UAAU,kCAAV,EAA8C,YAAO;AACpDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;;;;;;;;;AAmBA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAzBD;AA0BA,EA3BD;;AA6BArB,UAAU,qCAAV,EAAiD,YAAO;AACvDI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;;;;;;;;;AAmBA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAzBD;AA0BA,EA3BD;;AA6BArB,UAAU,qDAAV,EAAiE,YAAO;AACvEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;;;;;;;;;AAmBA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAzBD;AA0BA,EA3BD;;AA6BArB,UAAU,sDAAV,EAAkE,YAAO;AACxEI,KAAI,2BAAJ,EAAiC,YAAO;AACvC;AACH;;;;;;;;;;;;;;;;;;;AAmBA;;AAEGP,UAAOQ,KAAP,CAAcgB,MAAd,EAAsB,IAAtB;;AAEA,GAzBD;AA0BA,EA3BD;;AA6BA,CA7jCD;;AA+jCA","file":"test.bridge.js","sourcesContent":["\"use strict\";\n\n/*;\n\t@test-license:\n\t\tThe MIT License (MIT)\n\t\t@mit-license\n\n\t\tCopyright (@c) 2017 Richeve Siodina Bebedor\n\t\t@email: richeve.bebedor@gmail.com\n\n\t\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\t\tof this software and associated documentation files (the \"Software\"), to deal\n\t\tin the Software without restriction, including without limitation the rights\n\t\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t\tcopies of the Software, and to permit persons to whom the Software is\n\t\tfurnished to do so, subject to the following conditions:\n\n\t\tThe above copyright notice and this permission notice shall be included in all\n\t\tcopies or substantial portions of the Software.\n\n\t\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t\tSOFTWARE.\n\t@end-test-license\n\n\t@test-configuration:\n\t\t{\n\t\t\t\"package\": \"ehm\",\n\t\t\t\"path\": \"ehm/test.module.js\",\n\t\t\t\"file\": \"test.module.js\",\n\t\t\t\"module\": \"test\",\n\t\t\t\"author\": \"Richeve S. Bebedor\",\n\t\t\t\"eMail\": \"richeve.bebedor@gmail.com\",\n\t\t\t\"repository\": \"https://github.com/volkovasystems/ehm.git\"\n\t\t}\n\t@end-test-configuration\n\n\t@test-documentation:\n\n\t@end-test-documentation\n\n\t@include:\n\t\t{\n\t\t\t\"assert\": \"should\",\n\t\t\t\"ehm\": \"ehm\"\n\t\t}\n\t@end-include\n*/\n\nconst assert = require( \"should/as-function\" );\n\n\n\n\n\n//: @bridge:\nconst path = require( \"path\" );\n//: @end-bridge\n\n\n\n\n\n\n\n\n//: @bridge:\n\ndescribe( \"ehm\", ( ) => {\n\n\tlet bridgeURL = `file://${ path.resolve( __dirname, \"bridge.html\" ) }`;\n\n\tdescribe( \"`ehm( )`\", ( ) => {\n\t\tit( \"should return Meta class\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tassert.equal( browser.url( bridgeURL ).execute( function( ){ return typeof ehm( ); } ).value, \"function\" );\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( browser.url( bridgeURL ).execute( ( ) => ehm( ).name ).value, \"Meta\" );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 'helloworld' ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( \"helloworld\" ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( \"helloworld\" ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, \"[string String:data:text/string;base64,aGVsbG93b3JsZA%3D%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 1 ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( 1 ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( 1 ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, \"[number Number:data:text/number;base64,MQ%3D%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( true ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( true ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( true ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, \"[boolean Boolean:data:text/boolean;base64,dHJ1ZQ%3D%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( { 'hello': 'world' } ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( { \"hello\": \"world\" } ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( { \"hello\": \"world\" } ).serialize( );\n\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, \"[object Object:data:text/object;base64,eyJoZWxsbyI6IndvcmxkIn0%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( Symbol.for( 'hello' ) ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( Symbol.for( \"hello\" ) ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( Symbol.for( \"hello\" ) ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testB, \"[symbol Symbol:data:text/symbol;base64,U3ltYm9sKGhlbGxvKQ%3D%3D]\" );\n\t\t} );\n\t} );\n\n\t// describe( \"`ehm( ).create( function hello( ){ } ).serialize( )`\", ( ) => {\n\t// \tit( \"should return string type\", ( ) => {\n\t// \t\t//: @ignore:\n/*\n\t// \t\tlet testA = browser.url( bridgeURL ).execute(\n\t//\n\t// \t\t\tfunction( ){\n\t// \t\t\t\tlet Meta = ehm( );\n\t//\n\t// \t\t\t\treturn typeof Meta.create( function hello( ){ } ).serialize( );\n\t// \t\t\t}\n\t//\n\t// \t\t).value;\n\t// \t\t*/\n//: @end-ignore\n\t// \t\tassert.equal( testA, \"string\" );\n\t//\n\t// \t\tlet testB = browser.url( bridgeURL ).execute(\n\t//\n\t// \t\t\tfunction( ){\n\t// \t\t\t\tlet Meta = ehm( );\n\t//\n\t// \t\t\t\treturn Meta.create( function hello( ){ } ).serialize( );\n\t// \t\t\t}\n\t//\n\t// \t\t).value;\n\t//\n\t// \t\tassert.equal( testB, \"[function Function:data:text/function;base64,ZnVuY3Rpb24gaGVsbG8oICl7IH0%3D]\" );\n\t// \t} );\n\t// } );\n\n\tdescribe( \"`ehm( ).create( Error ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\t\t\t\t\treturn typeof Meta.create( Error ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\t\t\t\t\treturn Meta.create( Error ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, \"[function Function:data:text/function;base64,ZnVuY3Rpb24gRXJyb3IoKSB7IFtuYXRpdmUgY29kZV0gfQ%3D%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( ( ) => { } ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( ( ) => { } ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( ( ) => { } ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, \"[function Function:data:text/function;base64,KCApID0%2BIHsgfQ%3D%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( null ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( null ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( null ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, \"[object Object:data:text/object;base64,bnVsbA%3D%3D]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( undefined ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( undefined ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( undefined ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, \"[undefined Undefined:data:text/undefined;base64,dW5kZWZpbmVk]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( NaN ).serialize( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( NaN ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( NaN ).serialize( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, \"[number Number:data:text/number;base64,TmFO]\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).deserialize( ehm( ).create( 'helloworld' ).serialize( ) ).valueOf( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.deserialize( Meta.create( \"helloworld\" ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.deserialize( Meta.create( \"helloworld\" ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, \"helloworld\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).deserialize( ehm( ).create( 1 ).serialize( ) ).valueOf( )`\", ( ) => {\n\t\tit( \"should return number type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.deserialize( Meta.create( 1 ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"number\" );\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.deserialize( Meta.create( 1 ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, 1 );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).deserialize( ehm( ).create( true ).serialize( ) ).valueOf( )`\", ( ) => {\n\t\tit( \"should return boolean type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.deserialize( Meta.create( true ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"boolean\" );\n\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.deserialize( Meta.create( true ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.equal( testB, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).deserialize( ehm( ).create( { 'hello': 'world' } ).serialize( ) ).valueOf( )`\", ( ) => {\n\t\tit( \"should return object type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.deserialize( Meta.create( { \"hello\": \"world\" } ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"object\" );\n\n\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.deserialize( Meta.create( { \"hello\": \"world\" } ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\n\t\t\tassert.deepEqual( testB, { \"hello\": \"world\" } );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).deserialize( ehm( ).create( Symbol.for( 'hello' ) ).serialize( ) ).valueOf( )`\", ( ) => {\n\t\tit( \"should return symbol type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.deserialize( Meta.create( Symbol.for( \"hello\" ) ).serialize( ) ).valueOf( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"symbol\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.deserialize( Meta.create( Symbol.for( \"hello\" ) ).serialize( ) ).valueOf( ).toString( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testB, \"Symbol(hello)\" );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 'helloworld' ).toString( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( \"helloworld\" ).toString( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\tconst STRING_TAG_PATTERN = /^\\[object String(?:\\:(.+?))?\\]$/;\n\n\t\t\t\t\treturn STRING_TAG_PATTERN.test( Meta.create( \"helloworld\" ).toString( ) );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 1 ).toString( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( 1 ).toString( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\t\t\t\t\tconst NUMBER_TAG_PATTERN = /^\\[object Number(?:\\:(.+?))?\\]$/;\n\n\t\t\t\t\treturn NUMBER_TAG_PATTERN.test( Meta.create( 1 ).toString( ) );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testB, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( true ).toString( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( true ).toString( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\t\t\t\t\tconst BOOLEAN_TAG_PATTERN = /^\\[object Boolean(?:\\:(.+?))?\\]$/;\n\n\t\t\t\t\treturn BOOLEAN_TAG_PATTERN.test( Meta.create( true ).toString( ) );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, true );\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( { 'hello': 'world' } ).toString( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( { \"hello\": \"world\" } ).toString( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\t\t\t\t\tconst OBJECT_TAG_PATTERN = /^\\[object Object(?:\\:(.+?))?\\]$/;\n\n\t\t\t\t\treturn OBJECT_TAG_PATTERN.test( Meta.create( { \"hello\": \"world\" } ).toString( ) );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( Symbol.for( 'hello' ) ).toString( )`\", ( ) => {\n\t\tit( \"should return string type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testA = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn typeof Meta.create( Symbol.for( \"hello\" ) ).toString( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\t\t\tassert.equal( testA, \"string\" );\n\n\n\t\t\t//: @ignore:\n/*\n\t\t\tlet testB = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\t\t\t\t\tconst SYMBOL_TAG_PATTERN = /^\\[object Symbol(?:\\:(.+?))?\\]$/;\n\n\t\t\t\t\treturn SYMBOL_TAG_PATTERN.test( Meta.create( Symbol.for( \"hello\" ) ).toString( ) );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( testB, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 'helloworld' ).toNumber( )`\", ( ) => {\n\t\tit( \"should return Infinity\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( \"helloworld\" ).toNumber( ) == Infinity;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 1 ).toNumber( )`\", ( ) => {\n\t\tit( \"should return Infinity\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( 1 ).toNumber( ) == Infinity;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( true ).toNumber( )`\", ( ) => {\n\t\tit( \"should return Infinity\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( true ).toNumber( ) == Infinity;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( { 'hello': 'world' } ).toNumber( )`\", ( ) => {\n\t\tit( \"should return Infinity\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( { \"hello\": \"world\" } ).toNumber( ) == Infinity;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( Symbol.for( 'hello' ) ).toNumber( )`\", ( ) => {\n\t\tit( \"should return Infinity\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( Symbol.for( \"hello\" ) ).toNumber( ) == Infinity;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 'helloworld' ).toBoolean( )`\", ( ) => {\n\t\tit( \"should return true\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( \"helloworld\" ).toBoolean( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 1 ).toBoolean( )`\", ( ) => {\n\t\tit( \"should return true\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( 1 ).toBoolean( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( true ).toBoolean( )`\", ( ) => {\n\t\tit( \"should return true\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( true ).toBoolean( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( { 'hello': 'world' } ).toBoolean( )`\", ( ) => {\n\t\tit( \"should return true\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( { \"hello\": \"world\" } ).toBoolean( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( Symbol.for( 'hello' ) ).toBoolean( )`\", ( ) => {\n\t\tit( \"should return true\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\treturn Meta.create( Symbol.for( \"hello\" ) ).toBoolean( );\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 'helloworld' ).toObject( )`\", ( ) => {\n\t\tit( \"should return object type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\tlet descriptor = Meta.create( \"helloworld\" ).toObject( );\n\n\t\t\t\t\tlet test = typeof descriptor == \"object\" &&\n\t\t\t\t\t\t\"type\" in descriptor == true &&\n\t\t\t\t\t\t\"name\" in descriptor == true &&\n\t\t\t\t\t\t\"value\" in descriptor == true &&\n\t\t\t\t\t\t\"format\" in descriptor == true;\n\n\t\t\t\t\treturn test;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( 1 ).toObject( )`\", ( ) => {\n\t\tit( \"should return object type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\tlet descriptor = Meta.create( 1 ).toObject( );\n\n\t\t\t\t\tlet test = typeof descriptor == \"object\" &&\n\t\t\t\t\t\t\"type\" in descriptor == true &&\n\t\t\t\t\t\t\"name\" in descriptor == true &&\n\t\t\t\t\t\t\"value\" in descriptor == true &&\n\t\t\t\t\t\t\"format\" in descriptor == true;\n\n\t\t\t\t\treturn test;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( true ).toObject( )`\", ( ) => {\n\t\tit( \"should return object type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\tlet descriptor = Meta.create( true ).toObject( );\n\n\t\t\t\t\tlet test = typeof descriptor == \"object\" &&\n\t\t\t\t\t\t\"type\" in descriptor == true &&\n\t\t\t\t\t\t\"name\" in descriptor == true &&\n\t\t\t\t\t\t\"value\" in descriptor == true &&\n\t\t\t\t\t\t\"format\" in descriptor == true;\n\n\t\t\t\t\treturn test;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( { 'hello': 'world' } ).toObject( )`\", ( ) => {\n\t\tit( \"should return object type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\tlet descriptor = Meta.create( { \"hello\": \"world\" } ).toObject( );\n\n\t\t\t\t\tlet test = typeof descriptor == \"object\" &&\n\t\t\t\t\t\t\"type\" in descriptor == true &&\n\t\t\t\t\t\t\"name\" in descriptor == true &&\n\t\t\t\t\t\t\"value\" in descriptor == true &&\n\t\t\t\t\t\t\"format\" in descriptor == true;\n\n\t\t\t\t\treturn test;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\n\t\t} );\n\t} );\n\n\tdescribe( \"`ehm( ).create( Symbol.for( 'hello' ) ).toObject( )`\", ( ) => {\n\t\tit( \"should return object type\", ( ) => {\n\t\t\t//: @ignore:\n/*\n\t\t\tlet result = browser.url( bridgeURL ).execute(\n\n\t\t\t\tfunction( ){\n\t\t\t\t\tlet Meta = ehm( );\n\n\t\t\t\t\tlet descriptor = Meta.create( Symbol.for( \"hello\" ) ).toObject( );\n\n\t\t\t\t\tlet test = typeof descriptor == \"object\" &&\n\t\t\t\t\t\t\"type\" in descriptor == true &&\n\t\t\t\t\t\t\"name\" in descriptor == true &&\n\t\t\t\t\t\t\"value\" in descriptor == true &&\n\t\t\t\t\t\t\"format\" in descriptor == true;\n\n\t\t\t\t\treturn test;\n\t\t\t\t}\n\n\t\t\t).value;\n\t\t\t*/\n//: @end-ignore\n\n\t\t\tassert.equal( result, true );\n\t\t\t\n\t\t} );\n\t} );\n\n} );\n\n//: @end-bridge\n"]}